<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo&#39;s notepad</title>
  
  <subtitle>yet another blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leowll.com/"/>
  <updated>2018-06-09T08:18:14.000Z</updated>
  <id>http://leowll.com/</id>
  
  <author>
    <name>Leo Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为安装了Pandorabox的小米路由器Pro配置ipv6</title>
    <link href="http://leowll.com/2018/06/09/config-pandorabox-ipv6/"/>
    <id>http://leowll.com/2018/06/09/config-pandorabox-ipv6/</id>
    <published>2018-06-09T06:40:00.000Z</published>
    <updated>2018-06-09T08:18:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考来源： <a href="http://www.cnblogs.com/Arago/p/7765873.html" target="_blank" rel="noopener">Openwrt配置NAT6</a></p><p>假如你家的路由器是Pandorabox（或者其他openwrt，lede）的路由器，并且你家的网络支持ipv6， 那怎样设置路由器来实现网络提速呢？<br>先来看一下我家网络的提速效果：</p><p><img src="https://s1.ax1x.com/2018/06/09/Cbf4c8.md.png" height="200px" alt="speed test"></p><p>之前家里的网络速度一直徘徊在100M以下，设置了ipv6之后，一直保持在100M左右。</p><h1 id="ipv6比ipv4更快吗？"><a href="#ipv6比ipv4更快吗？" class="headerlink" title="ipv6比ipv4更快吗？"></a>ipv6比ipv4更快吗？</h1><p><a href="https://www.zhihu.com/question/19570943" target="_blank" rel="noopener">ipv6比ipv4更快吗？</a></p><blockquote><p>说 IPv6 能提高「网速」通常是指新建的 IPv6 网络通常具有更大的带宽（比如中国正在新建的 CERNET2 骨干网动辄 10Gbps、100Gbps 的连接带宽）、更好的流量控制、更少的 NAT 从而实现更高效的网络拓扑结构（IP 地址资源多从而不需要对数据包进行多次地址翻译和转发）。在这些方面 IPv6 确实是能提高「网速」的。</p></blockquote><h1 id="NAT的工作原理"><a href="#NAT的工作原理" class="headerlink" title="NAT的工作原理"></a>NAT的工作原理</h1><p>当内部网络中的一台主机想传输数据到外部网络时，它先将数据包传输到NAT路由器上，路由器检查数据包的报头，获取该数据包的源IP信息，并从它的NAT映射表中找出与该IP匹配的转换条目，用所选用的内部全局地址（全球唯一的IP地址）来替换内部局部地址，并转发数据包。<br>当外部网络对内部主机进行应答时，数据包被送到NAT路由器上，路由器接收到目的地址为内部全局地址的数据包后，它将用内部全局地址通过NAT映射表查找出内部局部地址，然后将数据包的目的地址替换成内部局部地址，并将数据包转发到内部主机。<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1d/Nat2.svg/300px-Nat2.svg.png" alt="nat工作原理"></p><h1 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h1><h2 id="查看-设置ipv6前缀"><a href="#查看-设置ipv6前缀" class="headerlink" title="查看/设置ipv6前缀"></a>查看/设置ipv6前缀</h2><p>在管理界面的网络&gt;接口画面可以看到</p><p>默认ipv6的前缀是设置好的，当然也可以自己定义一下。<br><a href="https://imgchr.com/i/CbfB6O" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/09/CbfB6O.md.jpg" alt="CbfB6O.md.jpg"></a></p><h2 id="设置DHCPv6"><a href="#设置DHCPv6" class="headerlink" title="设置DHCPv6"></a>设置DHCPv6</h2><p>在网络&gt;接口-LAN&gt;DHCP服务器中进行如下设置，使连接到网络的设备能自动获取ipv6地址：</p><ul><li>路由器通告服务： 服务器模式</li><li>DHCPv6服务： 服务器模式</li><li>DHCPv6模式： 无状态的+有状态的</li></ul><p><a href="https://imgchr.com/i/Cbfwp6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/09/Cbfwp6.md.png" alt="Cbfwp6.md.png"></a></p><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><p>ssh进你的路由器，执行下列命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip6tables -t nat -A POSTROUTING -o eth0.2 -j MASQUERADE</span><br></pre></td></tr></table></figure></p><p>等同于在路由器管理界面的防火墙中添加下列NAT规则</p><p><a href="https://imgchr.com/i/CbfDXD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/09/CbfDXD.md.png" alt="CbfDXD.md.png"></a></p><h2 id="配置网关"><a href="#配置网关" class="headerlink" title="配置网关"></a>配置网关</h2><p>同样利用ssh，查看自己路由器的默认ipv6网关<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip -6 route | grep default</span><br></pre></td></tr></table></figure></p><p>得到的结果类似于<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default from (your ipv6) via (gateway) dev eth0.2 proto static metric 512</span><br></pre></td></tr></table></figure></p><p>(gateway)的部分就是你的默认ipv6网关</p><p>执行下列命令设置你的默认ipv6网关<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route -A inet6 add default gw &lt;your default gw&gt; dev eth0.2</span><br></pre></td></tr></table></figure></p><p>执行下列命令重启防火墙和网络使设置生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/firewall restart</span><br><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure></p><h2 id="配置开机自动设置ipv6路由默认网关"><a href="#配置开机自动设置ipv6路由默认网关" class="headerlink" title="配置开机自动设置ipv6路由默认网关"></a>配置开机自动设置ipv6路由默认网关</h2><p>上述配置在重启路由器后会失效，需要在开机的时候自动设置网关。</p><p>在/etc/hotplug.d/iface/目录下新建名字为 90-ipv6 的文件<br>修改内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">[ <span class="string">"<span class="variable">$ACTION</span>"</span> = ifup ] || <span class="built_in">exit</span> 0</span><br><span class="line">route -A inet6 add default gw &lt;your default gw&gt; dev eth0.2</span><br></pre></td></tr></table></figure><p>给予可执行权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x 90-ipv6</span><br></pre></td></tr></table></figure></p><h2 id="配置DNS服务器"><a href="#配置DNS服务器" class="headerlink" title="配置DNS服务器"></a>配置DNS服务器</h2><p>DNS有可能被污染 手动修改wan6的dns方法是：</p><ol><li>修改wan6-高级设置 </li><li>取消勾选对端通告的DNS服务器 </li><li>自定义为谷歌的v6dns</li></ol><p><a href="https://imgchr.com/i/Cbf01K" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/09/Cbf01K.md.png" alt="Cbf01K.md.png"></a></p><h2 id="测试IPv6是否正常"><a href="#测试IPv6是否正常" class="headerlink" title="测试IPv6是否正常"></a>测试IPv6是否正常</h2><p>通过 <a href="http://test-ipv6.com/" target="_blank" rel="noopener">http://test-ipv6.com/</a> </p><p>或者 <a href="http://ipv6-test.com/" target="_blank" rel="noopener">http://ipv6-test.com/</a></p><p>测试IPv6是否正常</p><p><a href="https://imgchr.com/i/Cbfsne" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/09/Cbfsne.md.jpg" alt="Cbfsne.md.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考来源： &lt;a href=&quot;http://www.cnblogs.com/Arago/p/7765873.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Openwrt配置NAT6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假如你家的路由器是Pandorabox（或
      
    
    </summary>
    
    
      <category term="Pandorabox" scheme="http://leowll.com/tags/Pandorabox/"/>
    
      <category term="openwrt" scheme="http://leowll.com/tags/openwrt/"/>
    
      <category term="lede" scheme="http://leowll.com/tags/lede/"/>
    
      <category term="ipv6" scheme="http://leowll.com/tags/ipv6/"/>
    
      <category term="mi r3p" scheme="http://leowll.com/tags/mi-r3p/"/>
    
  </entry>
  
  <entry>
    <title>为什么Java取MD5哈希值的时候要&amp;0xff</title>
    <link href="http://leowll.com/2018/06/07/why-java-md5-0xff/"/>
    <id>http://leowll.com/2018/06/07/why-java-md5-0xff/</id>
    <published>2018-06-07T18:50:39.000Z</published>
    <updated>2018-06-08T08:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>想要得到字符串的MD5哈希值怎么办？<br>先来了解一下MD5哈希值的概念。</p><h2 id="MD5散列"><a href="#MD5散列" class="headerlink" title="MD5散列"></a>MD5散列</h2><p>一般128位的MD5散列被表示为32位十六进制数字。以下是一个43位长的仅ASCII字母列的MD5散列：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MD5(<span class="string">"The quick brown fox jumps over the lazy dog"</span>)</span><br><span class="line">= <span class="number">9e107</span>d9d372bb6826bd81d3542a419d6</span><br></pre></td></tr></table></figure></p><p>即使在原文中作一个小变化（比如用c取代d）其散列也会发生巨大的变化：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MD5(<span class="string">"The quick brown fox jumps over the lazy cog"</span>)</span><br><span class="line">= <span class="number">1055</span>d3e698d289f2af8663725127bd4b</span><br></pre></td></tr></table></figure></p><p>也就是说，给你一串字符串，你要把它转换成固定长度的散列。</p><p>##用Java来实现MD5哈希值<br>Java中可以这样实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">   MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">   md.update(password.getBytes());</span><br><span class="line">   <span class="keyword">byte</span> byteData[] = md.digest();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//convert the byte to hex format method 1</span></span><br><span class="line">   StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteData.length; i++) &#123;</span><br><span class="line">    sb.append(Integer.toString((byteData[i] &amp; <span class="number">0xff</span>) + <span class="number">0x100</span>, <span class="number">16</span>).substring(<span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(<span class="string">"Digest(in hex format):: "</span> + sb.toString());</span><br></pre></td></tr></table></figure></p><h2 id="byte数值转换为int数值时的注意事项"><a href="#byte数值转换为int数值时的注意事项" class="headerlink" title="byte数值转换为int数值时的注意事项"></a>byte数值转换为int数值时的注意事项</h2><p>那么问题来了，下面这行代码做的是啥？<br><code>Integer.toString((byteData[i] &amp; 0xff) + 0x100, 16).substring(1)</code><br>这行语句其实是将byteData中的byte类型的数据转换成十六进制的数据进行表示。<br>为什么这么复杂？<br>是因为要考虑到byteData中的负数。</p><p>考虑一下下面这段代码，试图将byte类型表示为16进制形式的字符串<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testByteInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">byte</span> a = <span class="number">127</span>;</span><br><span class="line">print(a);</span><br><span class="line"><span class="keyword">byte</span> b = -<span class="number">127</span>;</span><br><span class="line">print(b);</span><br><span class="line"><span class="keyword">byte</span> c = <span class="number">2</span>;</span><br><span class="line">print(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">System.out.println(Integer.toBinaryString(b));</span><br><span class="line">System.out.println(Integer.toBinaryString(b &amp; <span class="number">0xff</span>));</span><br><span class="line">System.out.println(Integer.toHexString(b));</span><br><span class="line">System.out.println(Integer.toHexString(b &amp; <span class="number">0xff</span>));</span><br><span class="line">System.out.println(Integer.toString(b, <span class="number">16</span>));</span><br><span class="line">System.out.println(Integer.toString(b &amp; <span class="number">0xff</span>, <span class="number">16</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1111111</span><br><span class="line">1111111</span><br><span class="line">7f</span><br><span class="line">7f</span><br><span class="line">7f</span><br><span class="line">7f</span><br><span class="line">11111111111111111111111110000001</span><br><span class="line">10000001</span><br><span class="line">ffffff81</span><br><span class="line">81</span><br><span class="line">-7f</span><br><span class="line">81</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>从输出结果可以看出几个问题。</p><ul><li>String的几个函数接收byte类型的参数时自动将其转换为int类型</li><li>int类型的负数<code>-127</code>用2进制数据来表示的时候，会用符号位补全，变成<code>11111111111111111111111110000001</code>, 而这个2进制的数据再用16进制来表示的时候却成了<code>ffffff81</code>，与<code>-127</code>的16进制表示<strong>不一致</strong>。</li><li>负数的十六进制表现形式例如<code>-7f</code>不符合哈希值的要求。哈希值中不能带有负号。所以需要将其转换一下。</li><li>比较小的数值，例如<code>2</code>，转换成的16进制字符串也是<code>2</code>，不符合哈希值的长度要求。哈希值要求每个byte用2个16进制的字符来表示。</li></ul><p>要解决上面两个问题，前面的java程序给出的答案是：</p><ul><li>用<code>&amp; 0xff</code>来对byte数值进行补零扩展</li><li>用<code>+ 0x100</code>来保证每个数转换成16进制后会得到3个字符</li><li>用<code>.subString(1)</code>来去掉3个字符的第一个字符</li></ul><p>这样就能得到2个16进制的字符了。<br>循环一遍，就能得到相应的MD5哈希字符串了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想要得到字符串的MD5哈希值怎么办？&lt;br&gt;先来了解一下MD5哈希值的概念。&lt;/p&gt;
&lt;h2 id=&quot;MD5散列&quot;&gt;&lt;a href=&quot;#MD5散列&quot; class=&quot;headerlink&quot; title=&quot;MD5散列&quot;&gt;&lt;/a&gt;MD5散列&lt;/h2&gt;&lt;p&gt;一般128位的MD5散列
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://leowll.com/tags/java/"/>
    
      <category term="md5" scheme="http://leowll.com/tags/md5/"/>
    
      <category term="hash" scheme="http://leowll.com/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Generate 没有反应的原因</title>
    <link href="http://leowll.com/2018/06/06/hexo-generate-no-response/"/>
    <id>http://leowll.com/2018/06/06/hexo-generate-no-response/</id>
    <published>2018-06-06T15:05:00.000Z</published>
    <updated>2018-06-06T15:09:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>在hexo执行下列命令时，没有看到生成的结果，只看到了一个kill之类的中断语句。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p><p>原因很可能是你的服务器（vps）swap不足。<br>通过执行下列命令可以增加swap内存。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dd <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1024 count=1024k</span><br><span class="line">sudo mkswap /swapfile</span><br><span class="line">sudo swapon /swapfile</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在hexo执行下列命令时，没有看到生成的结果，只看到了一个kill之类的中断语句。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://leowll.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>理解Spring中的DI和AOP</title>
    <link href="http://leowll.com/2018/05/10/understand-spring-di-aop/"/>
    <id>http://leowll.com/2018/05/10/understand-spring-di-aop/</id>
    <published>2018-05-10T09:55:25.000Z</published>
    <updated>2018-06-06T13:49:12.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a><strong>问题的提出</strong></h1><p>Spring中的依赖注入（DI)为何而生？<br> 下面这篇日语文章提到，所有的Web应用都需要考虑到下面三个问题。[] <a href="http://penguinlabo.wp.xdomain.jp/understandspringmvc/" target="_blank" rel="noopener">http://penguinlabo.wp.xdomain.jp/understandspringmvc/</a></p><ol><li>对象的生命周期问题。<br>假设你用Servlet来接收用户的访问请求，有一个用户需要访问一个页面，你就需要一个线程来负责处理这个请求，并调用某个业务逻辑（比如调用一个UserService的实例）。如果处理不当，每新增一个用户就实例化一个业务逻辑（new一个UserService的实例），随着访问用户的增多，就会给系统带来大量垃圾回收负担，以及内存消耗的问题。为了防止这种情况发生，就需要把业务逻辑的部分设计为Singleton的，这样就不会每次都新增一个实例</li><li>松耦合问题。<br>为了实现Web程序中的松耦合，即让一个类与另一个类不是那么的紧密结合，通常需要接口（Interface）来实现。但是单存的利用Interface并不能实现松耦合。还需要利用一些技巧，比如Factory Method等设计模式。 </li><li>技术细节的隐藏。<br>当你写一个User或者SalesOrder类的时候，你希望专注于自己的业务逻辑，比如创建用户，删除用户，创建订单，删除订单这些具体的业务。如果你在这些类中再加上访问记录（log）处理，就会明显的影响你程序的可读性。因为本质上log处理和你的业务逻辑没有什么联系，两者混杂在一起就会让人看起来比较头大。还有一些异常处理类的逻辑也会产生同样的问题。你怎样才能把这些和真正的业务逻辑无关的逻辑分离出去？</li></ol><h1 id="问题的回答"><a href="#问题的回答" class="headerlink" title="问题的回答"></a>问题的回答</h1><p>Spring给出的解决方案是这样的。<br>1）对象的生命周期问题。=&gt;DI<br>2）松耦合问题。 =&gt; DI<br>3）技术细节的隐藏。=&gt;AOP </p><p>首先Spring是怎么实现DI的呢，是通过DI Container来实现的。<br>在没有使用DI的Web应用中，Controller用到Service的时候，会生成（new）一个，Service用到DAO的时候，也是同样的生成（new）一个。 <img src="http://65.49.230.2/wordpress/wp-content/uploads/2018/06/no-di-300x187.jpg" alt=""> 而使用了DI的Spring，则将实例化的工作全部交给了DI Container去做。 Controller中仅仅声明了Service接口的一个属性，具体的实现（new）没有去做，同样Service中也只是声明了一个DAO接口的一个属性，也没有去实现（new）。当需要实例的时候，就让DI Container根据配置去找到合适的类去实例化相应的接口属性。 <img src="http://65.49.230.2/wordpress/wp-content/uploads/2018/06/DI-300x186.png" alt=""> 而用Spring写成的Web程序，其处理顺序可以用下图来表示 <img src="http://65.49.230.2/wordpress/wp-content/uploads/2018/06/Spring-flow-300x195.png" alt=""></p><ol><li>Dispatcher Servlet接收用户访问请求</li><li>Dispatcher Servlet利用HandlerMapping取得URL所对应的Controller对象</li><li>Controller来实行业务逻辑，调用Service对象和DAO对象得到业务数据，并把数据放到Model中。并返回一个View的名字，希望把数据显示到该View上。</li><li>Dispatcher Servlet得到View的名字后，调用View Resolver来得到相应的View对象。</li><li>Dispatcher Servlet把View对象生成为一个画面（View），画面包含Model对象中的数据，然后把这个View返回给用户(response)。用户的浏览器把这个画面呈献给用户。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题的提出&quot;&gt;&lt;a href=&quot;#问题的提出&quot; class=&quot;headerlink&quot; title=&quot;问题的提出&quot;&gt;&lt;/a&gt;&lt;strong&gt;问题的提出&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Spring中的依赖注入（DI)为何而生？&lt;br&gt; 下面这篇日语文章提到，所有的W
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://leowll.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://leowll.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://leowll.com/tags/AOP/"/>
    
      <category term="DI" scheme="http://leowll.com/tags/DI/"/>
    
      <category term="设计模式" scheme="http://leowll.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>我对Javascript中的闭包Closure的理解</title>
    <link href="http://leowll.com/2017/02/20/my-understandng-of-javascript-closure/"/>
    <id>http://leowll.com/2017/02/20/my-understandng-of-javascript-closure/</id>
    <published>2017-02-21T03:25:27.000Z</published>
    <updated>2018-06-06T14:39:37.880Z</updated>
    
    <content type="html"><![CDATA[<p>怎样理解 Javascript Closure 也就是闭包的概念，想必很多人在为此头疼。 笔者先后参考了下面这些资料 </p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noopener">MDN Javascript Closure</a> </li><li><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="noopener">阮一峰的博客</a> </li><li><a href="http://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html" target="_blank" rel="noopener">Frank Fang的博客</a> </li></ul><p>作者们都声称自己搞懂了闭包的概念，可自己还是看的云里雾里。 直到笔者看到下面这篇文章，才开始真正理解闭包的概念和应用场景。 Jonathan D. Johnson的博客 <a href="http://jondavidjohn.com/javascript-closure-explained-using-events/" target="_blank" rel="noopener">http://jondavidjohn.com/javascript-closure-explained-using-events/</a> 下面我试着把这篇文章边翻译边把自己的理解写出来。 先看一下下面这段程序， 效果：在第3次按下button的时候显示”Third time’s the charm”的消息框。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// declare counter outside event handler's scope</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"button"</span>);</span><br><span class="line"></span><br><span class="line">element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// increment outside counter</span></span><br><span class="line">    counter++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (counter === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// do something every third time</span></span><br><span class="line">        alert(<span class="string">"Third time's the charm!"</span>);</span><br><span class="line">        <span class="comment">// reset counter</span></span><br><span class="line">        counter = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>程序中声明了一个全局变量counter,每次按下button都会唤起程序，从而让counter++ 如果你只在自己的网页中执行一次的话，这么写也无所谓，但是如果你想在其他地方复用的话， 最好还是把这段程序封装成单独的一个函数。 这时问题就来了，你要每次都声明一个外部的全局变量counter吗？很明显这种做法太笨拙。 于是closure的作用就发挥出来了。 如果你看过了MDN的解释，就会知道closure其实是这样一种机制，</p><blockquote><p>函数可以访问它被创建时所处的作用域中的对象（Object）。</p></blockquote><p>于是上面那段程序利用闭包可以优化成下面这种形式：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"button1"</span> <span class="attr">value</span>=<span class="string">"button1"</span> <span class="attr">class</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"button2"</span> <span class="attr">value</span>=<span class="string">"button2"</span> <span class="attr">class</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myClosureFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// init the count to 0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//count</span></span></span><br><span class="line"><span class="undefined">            count++;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// do something every third time</span></span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"Third time's the charm!"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//reset counter</span></span></span><br><span class="line"><span class="undefined">                count = 0;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element1 = <span class="built_in">document</span>.getElementById(<span class="string">"button1"</span>);</span></span><br><span class="line"><span class="undefined">    element1.onclick = myClosureFunc();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element2 = <span class="built_in">document</span>.getElementById(<span class="string">"button2"</span>);</span></span><br><span class="line"><span class="undefined">    element2.onclick = myClosureFunc();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>  counter的位置移到了event handler函数的内部，而函数的返回值为一个闭包。 按照上面的概念，myClosureFunc中的闭包可以访问它创建时所处的作用域(scope), 于是它就可以访问自己的counter，而这个counter是<strong>相对</strong>全局的，也就是说，在element1被按下的过程中，这个counter是共有的。 而element1和element2中的counter又是<strong>相对独立</strong>的。 怎么样，有没有帮你理解closure在作用域这个概念里所起的作用？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;怎样理解 Javascript Closure 也就是闭包的概念，想必很多人在为此头疼。 笔者先后参考了下面这些资料 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Javascript" scheme="http://leowll.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[SAPUI5 Tutorial Trouble Shooting] Test Suite and Automated Testing Step10</title>
    <link href="http://leowll.com/2017/02/15/sapui5-qunit-404-not-found/"/>
    <id>http://leowll.com/2017/02/15/sapui5-qunit-404-not-found/</id>
    <published>2017-02-15T05:37:52.000Z</published>
    <updated>2018-06-06T13:52:51.110Z</updated>
    
    <content type="html"><![CDATA[<p>如果你在进行[SAPUI5 Tutorial] Test Suite and Automated Testing Step10 时遇到过 SAPUI5 QUnit 404 not found 问题， /resources/sap/ui/qunit/qunit-redirect.js 404 not found 这篇文章将帮你找到解决方法。 正如Tutorial一开始写的<a href="https://sapui5.netweaver.ondemand.com/sdk/index.html#docs/guide/8b49fc198bf04b2d9800fc37fecbb218.html" target="_blank" rel="noopener">那样</a>，</p><blockquote><p>If you are running the tutorial in SAP Web IDE, you will have to configure the project descriptor neo-app.json. In this descriptor file, the path to the resources is already configured. Other development environments might need the resources to be copied to the server. Alternatively, you can use the CDN version of <a href="https://sapui5.hana.ondemand.com/resources/sap-ui-core.js" target="_blank" rel="noopener">https://sapui5.hana.ondemand.com/resources/sap-ui-core.js</a>.</p></blockquote><p>也就是说，如果你使用的是Web IDE,而你又是copy的Tutorial中给出的code，你还需要配置项目的neo-app.json文件让项目找到resources系列的文件。 If you are using web IDE and copied the code from the sample, you may aslo need to set up the neo-app.json file to let the project find the resource folder. 具体配置如下所示，其实就是简单复制一下从头开始新建的项目中的neo-app.json文件。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"welcomeFile"</span>: <span class="string">"/webapp/test/test.html"</span>,</span><br><span class="line">  <span class="attr">"routes"</span>: \[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"/resources"</span>,</span><br><span class="line">      <span class="attr">"target"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"service"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"sapui5"</span>,</span><br><span class="line">        <span class="attr">"entryPath"</span>: <span class="string">"/resources"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"SAPUI5 Resources"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"/test-resources"</span>,</span><br><span class="line">      <span class="attr">"target"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"service"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"sapui5"</span>,</span><br><span class="line">        <span class="attr">"entryPath"</span>: <span class="string">"/test-resources"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"SAPUI5 Test Resources"</span></span><br><span class="line">    &#125;</span><br><span class="line">  \],</span><br><span class="line">  <span class="attr">"sendWelcomeFileRedirect"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果你在进行[SAPUI5 Tutorial] Test Suite and Automated Testing Step10 时遇到过 SAPUI5 QUnit 404 not found 问题， /resources/sap/ui/qunit/qunit-redirec
      
    
    </summary>
    
      <category term="SAP" scheme="http://leowll.com/categories/SAP/"/>
    
      <category term="技术" scheme="http://leowll.com/categories/SAP/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="qunit" scheme="http://leowll.com/tags/qunit/"/>
    
      <category term="sapui5" scheme="http://leowll.com/tags/sapui5/"/>
    
  </entry>
  
  <entry>
    <title>在sap hybris的accelerator中添加hybris cms组件(hybris cms component)的方法</title>
    <link href="http://leowll.com/2016/11/14/create-new-hybris-cms-component-in-accelerator/"/>
    <id>http://leowll.com/2016/11/14/create-new-hybris-cms-component-in-accelerator/</id>
    <published>2016-11-15T00:43:50.000Z</published>
    <updated>2018-06-06T13:53:57.218Z</updated>
    
    <content type="html"><![CDATA[<p>在hybris的accelerator中新建CMS组件(<strong>hybris cms component</strong>)的步骤包括： *注意：hybris addon中的步骤有所不同，将在另一篇文章中记述。</p><ol><li>自定义hybris item，在extension的items.xml文件中定义，类似于任何其他hybris item。</li><li>一个继承AbstractCMSComponentController的Spring MVC控制器，或使用DefaultCMSComponentController。</li><li>用于在页面上呈现组件的JSP，根据需要使用HTML，CSS和Tag Libraries。</li></ol><p>可以通过XML配置为组件自定义hybris WCMS Cockpit：</p><ol><li>editorArea_typeName.xml：WCMS Cockpit编辑器区域的配置文件。</li><li>contentEditor_typeName.xml：用于LiveEdit模式和联机编辑的配置文件</li><li>wizardConfig_typeName.xml：如果通过向导对话框添加组件，则通过此文件进行向导配置。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在hybris的accelerator中新建CMS组件(&lt;strong&gt;hybris cms component&lt;/strong&gt;)的步骤包括： *注意：hybris addon中的步骤有所不同，将在另一篇文章中记述。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自定义hybris item
      
    
    </summary>
    
      <category term="SAP" scheme="http://leowll.com/categories/SAP/"/>
    
      <category term="技术" scheme="http://leowll.com/categories/SAP/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="cms component" scheme="http://leowll.com/tags/cms-component/"/>
    
      <category term="hybris cms component" scheme="http://leowll.com/tags/hybris-cms-component/"/>
    
      <category term="sap hybris" scheme="http://leowll.com/tags/sap-hybris/"/>
    
  </entry>
  
  <entry>
    <title>在SAP hybris中实行单体测试(Unit Test)的注意事项</title>
    <link href="http://leowll.com/2016/10/28/sap-hybris-unit-test-note/"/>
    <id>http://leowll.com/2016/10/28/sap-hybris-unit-test-note/</id>
    <published>2016-10-28T08:45:22.000Z</published>
    <updated>2018-06-06T09:25:26.813Z</updated>
    
    <content type="html"><![CDATA[<p>在SAP hybris的单体测试中，出现如下错误信息：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR \[main\] (junit) \[FlexibleSearch\] Flexiblesearch error: could not translate value expression 'session.catalogversions'</span><br><span class="line">ERROR \[main\] (junit) \[FlexibleSearch\] query was 'SELECT &#123;cat.pk&#125; FROM &#123;Category AS cat&#125; WHERE NOT EXISTS (&#123; &#123;SELECT &#123;pk&#125; FROM &#123;CategoryCategoryRelation AS rel JOIN Category AS super ON &#123;rel.source&#125;=&#123;super.PK&#125; &#125; WHERE &#123;rel:target&#125;=&#123;cat.pk&#125; AND &#123;super.catalogVersion&#125;=&#123;cat.catalogVersion&#125; &#125;&#125;) AND &#123;cat.catalogVersion&#125; = ?catalogVersion'</span><br><span class="line">ERROR \[main\] (junit) \[FlexibleSearch\] translated query was: SELECT  item\_t0.PK  FROM junit\_categories item\_t0 WHERE (NOT EXISTS (SELECT  item\_t1.PK  FROM junit\_cat2catrel item\_t1 JOIN junit\_categories item\_t2 ON  item\_t1.SourcePK = item\_t2.PK  WHERE ( item\_t1.TargetPK = item\_t0.PK  AND  item\_t2.p\_catalogversion = item\_t0.p\_catalogversion ) AND ((item\_t1.TypePkString=?  AND item\_t2.TypePkString IN  (?,?,?,?)  AND (( item\_t2.p\_catalogversion  IN (?))) ))) AND  item\_t0.p\_catalogversion  = ?) AND (item\_t0.TypePkString IN  (?,?,?,?)  AND (( item\_t0.p_catalogversion  IN (?))) )</span><br><span class="line">ERROR \[main\] (junit) \[LogRunListener\] Test method testCategoryNav(org.training.renderer.CategoryNavComponentRendererTest) failed!!</span><br><span class="line">de.hybris.platform.servicelayer.search.exceptions.FlexibleSearchException: could not translate value expression 'session.catalogversions'</span><br></pre></td></tr></table></figure></p><p>Java代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> org.training.renderer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.hybris.platform.catalog.CatalogVersionService;</span><br><span class="line"><span class="keyword">import</span> de.hybris.platform.catalog.model.CatalogVersionModel;</span><br><span class="line"><span class="keyword">import</span> de.hybris.platform.category.CategoryService;</span><br><span class="line"><span class="keyword">import</span> de.hybris.platform.category.model.CategoryModel;</span><br><span class="line"><span class="keyword">import</span> de.hybris.platform.servicelayer.ServicelayerTransactionalTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/\*\*</span><br><span class="line"> \* <span class="meta">@author</span> lwang</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryNavComponentRendererTest</span> <span class="keyword">extends</span> <span class="title">ServicelayerTransactionalTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"categoryService"</span>)</span><br><span class="line"><span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"catalogVersionService"</span>)</span><br><span class="line"><span class="keyword">private</span> CatalogVersionService catalogVersionService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCategoryNav</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">final</span> CatalogVersionModel catalogVersion = catalogVersionService.getCatalogVersion(<span class="string">"uaProductCatalog"</span>, <span class="string">"Online"</span>);</span><br><span class="line">Assert.assertNotNull(catalogVersion);</span><br><span class="line"><span class="keyword">final</span> Collection&lt;CategoryModel&gt; categoryList = categoryService.getRootCategoriesForCatalogVersion(catalogVersion);</span><br><span class="line">Assert.assertNotNull(categoryList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之所以会出现错误，是因为程序没有加载hybris框架通常需要的一些环境变量。 在测试用例中加入如下代码可以解决问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">createCoreData();</span><br><span class="line">createDefaultCatalog();</span><br><span class="line">createHardwareCatalog();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在SAP hybris的单体测试中，出现如下错误信息：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="sap hybris" scheme="http://leowll.com/tags/sap-hybris/"/>
    
      <category term="sap hybris unit test" scheme="http://leowll.com/tags/sap-hybris-unit-test/"/>
    
  </entry>
  
  <entry>
    <title>sap hybris在新建自定义cms component时的注意事项</title>
    <link href="http://leowll.com/2016/10/25/sap-hybris-cms-component-notes/"/>
    <id>http://leowll.com/2016/10/25/sap-hybris-cms-component-notes/</id>
    <published>2016-10-26T02:06:57.000Z</published>
    <updated>2018-06-06T13:55:53.959Z</updated>
    
    <content type="html"><![CDATA[<p>在SAP hybris中添加自定义的CMS Component,需要注意以下几点： 参考链接:<a href="https://wiki.hybris.com/pages/viewpage.action?pageId=294094319" target="_blank" rel="noopener"> https://wiki.hybris.com/pages/viewpage.action?pageId=294094319</a></p><ol><li>在addon中添加，可免去对accelerator的修改</li><li>在/<addon-name>/resources/<addon-name>/web/spring/<addon-name>-web-spring.xml中添加renderer和rendererMapping的定义</addon-name></addon-name></addon-name></li><li>使用ant命令安装addon</li></ol><p>/<addon-name>-web-spring.xml的代码示例如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"yourComponentRenderer"</span> <span class="attr">class</span>=<span class="string">"org.training.renderer.yourComponentRenderer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeService"</span> <span class="attr">ref</span>=<span class="string">"typeService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uiExperienceService"</span> <span class="attr">ref</span>=<span class="string">"defaultUiExperienceService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cmsComponentService"</span> <span class="attr">ref</span>=<span class="string">"cmsComponentService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"modelService"</span> <span class="attr">ref</span>=<span class="string">"modelService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uiExperienceViewPrefixMap"</span> <span class="attr">ref</span>=<span class="string">"uiExperienceViewPrefixMap"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unknownUiExperiencePrefix"</span> <span class="attr">value</span>=<span class="string">"desktop"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"yourComponentRendererMapping"</span> <span class="attr">parent</span>=<span class="string">"addonCmsComponentRendererMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeCode"</span> <span class="attr">value</span>=<span class="string">"yourComponent"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">ref</span>=<span class="string">"yourComponentRenderer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></addon-name></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在SAP hybris中添加自定义的CMS Component,需要注意以下几点： 参考链接:&lt;a href=&quot;https://wiki.hybris.com/pages/viewpage.action?pageId=294094319&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="cms component" scheme="http://leowll.com/tags/cms-component/"/>
    
      <category term="sap hybris" scheme="http://leowll.com/tags/sap-hybris/"/>
    
  </entry>
  
  <entry>
    <title>Sony 面经</title>
    <link href="http://leowll.com/2016/09/27/sony-interview-questions/"/>
    <id>http://leowll.com/2016/09/27/sony-interview-questions/</id>
    <published>2016-09-28T02:12:57.000Z</published>
    <updated>2018-06-06T05:49:00.140Z</updated>
    
    <content type="html"><![CDATA[<p>Sony面试的一些问题记录一下。   时间:9月26日 地点：品川本社 面试官：4人 问题：</p><ul><li>自我介绍</li><li>简历细节的确认</li><li>离职的动机</li><li>来日本工作的动机</li><li>介绍一下迄今为止所经历的项目中的成功和失败经验</li><li>你自己的卖点(Sales Point)是什么</li><li>对这个岗位的理解</li><li>业余时间做过什么项目</li><li>有什么问题<ul><li>岗位具体的工作内容是什么</li><li>同样年龄段的人都是怎样的工作风格</li><li>该岗位对英语作了一些具体要求，实际工作中和海外的团队有何种交流合作</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sony面试的一些问题记录一下。   时间:9月26日 地点：品川本社 面试官：4人 问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li&gt;简历细节的确认&lt;/li&gt;
&lt;li&gt;离职的动机&lt;/li&gt;
&lt;li&gt;来日本工作的动机&lt;/li&gt;
&lt;li&gt;介绍一下迄今为止所经历的项
      
    
    </summary>
    
      <category term="职业" scheme="http://leowll.com/categories/%E8%81%8C%E4%B8%9A/"/>
    
    
      <category term="sony interview questions" scheme="http://leowll.com/tags/sony-interview-questions/"/>
    
  </entry>
  
  <entry>
    <title>有了uwsgi为什么还需要nginx</title>
    <link href="http://leowll.com/2015/11/07/why-need-nginx-with-uwsgi/"/>
    <id>http://leowll.com/2015/11/07/why-need-nginx-with-uwsgi/</id>
    <published>2015-11-07T11:13:59.000Z</published>
    <updated>2018-06-06T15:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ngix存在的意义在哪里？"><a href="#ngix存在的意义在哪里？" class="headerlink" title="ngix存在的意义在哪里？"></a>ngix存在的意义在哪里？</h2><p>在python的web开发中，我用flask框架写了一个小程序，部署的时候，我用到了uwsgi来做容器。<br>在学习uwsgi部署的过程中，另一个关键词nginx频繁的跳出来。这两者通常是成对出现的。<br>你有没有和我一样的困惑，为什么有了uwsgi我们还需要nginx?<br>我是说，既然uwsgi能够展现你想要的内容，那nginx存在的意义在哪里？<br>首先，nginx是一个HTTP 服务器。如果你是学Java出身的，说到HTTP服务器你应该会想到Apache。<br>类似的uwsgi可以比喻为tomcat。 nginx官方网站上给出的一张图片很好的揭示了nginx的角色。<br><img src="https://farm1.staticflickr.com/751/22845441965_8ca93b385a_z.jpg" alt="architecture-nginx"></p><h2 id="ngix的主要功能"><a href="#ngix的主要功能" class="headerlink" title="ngix的主要功能"></a>ngix的主要功能</h2><p>我所理解的nginx的主要功能，有以下几个部分：</p><ul><li>nginx处理<strong>静态内容请求更专业、快速</strong>。</li><li>nginx可以<strong>缓存请求</strong>。如果让uwsgi来直接接受请求的话，uwsgi需要花费大量的时间来等待request，这本身对web应用所在的主机是很大的资源浪费。</li><li><strong>分发请求</strong>。假如你有好几个web应用，分布在不同的主机上，nginx可以把请求分发到各自的web应用来进行处理。这一特点是nginx可以用来做负载均衡器。</li><li>相比web容器，nginx的<strong>漏洞更少更安全</strong>。</li><li>nginx可以更好的处理<strong>HTTPS</strong>。</li><li>nginx有<strong>网关</strong>（gateway）的作用，可以过滤访问IP。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ngix存在的意义在哪里？&quot;&gt;&lt;a href=&quot;#ngix存在的意义在哪里？&quot; class=&quot;headerlink&quot; title=&quot;ngix存在的意义在哪里？&quot;&gt;&lt;/a&gt;ngix存在的意义在哪里？&lt;/h2&gt;&lt;p&gt;在python的web开发中，我用flask框架写了
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="知识" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="web开发" scheme="http://leowll.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="load balance" scheme="http://leowll.com/tags/load-balance/"/>
    
      <category term="nginx" scheme="http://leowll.com/tags/nginx/"/>
    
      <category term="uwsgi" scheme="http://leowll.com/tags/uwsgi/"/>
    
      <category term="uwsgi nginx" scheme="http://leowll.com/tags/uwsgi-nginx/"/>
    
      <category term="负载均衡" scheme="http://leowll.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>在Python中将datetime字符串转换为utc timestamp</title>
    <link href="http://leowll.com/2015/10/27/python-datetime-to-utc-timestamp/"/>
    <id>http://leowll.com/2015/10/27/python-datetime-to-utc-timestamp/</id>
    <published>2015-10-27T14:57:30.000Z</published>
    <updated>2018-06-06T13:57:21.507Z</updated>
    
    <content type="html"><![CDATA[<p>在python中有很多方法将datetime的字符串转换为 utc timestamp 网上找了好多，看起来都纷繁复杂。本文就想简单的做好一件事，就是将datetime的字符串转换为utc timestamp。 理解这个转换的关键，在于理解python中所有的日期字符串都被python解读为local time。 也就是说，同样是’2015/10/27 00:00:00’这个字符串，虽然身处东京的我和身在伦敦的你看到的是同一个字符串，但他们本身被python解读为两个不同地方的日期和时间。 如果想让python不去理会时差，而只想要utc格式的时间戳的话，用calendar.timegm()函数即可实现。 现举例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">\_\_author\_\_ = <span class="string">'leo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">local</span>\<span class="title">_to</span>\<span class="title">_utc</span><span class="params">(date_value)</span>:</span></span><br><span class="line">    utc\_timetuple = datetime.strptime(date\_value, <span class="string">'%Y/%m/%d %H:%M:%S'</span>).timetuple()</span><br><span class="line">    ts = calendar.timegm(utc_timetuple)</span><br><span class="line">    <span class="keyword">return</span> ts * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">local</span>\<span class="title">_timestamp</span><span class="params">(date\_value)</span>:</span></span><br><span class="line">    utc\_timetuple = datetime.strptime(date\_value, <span class="string">'%Y/%m/%d %H:%M:%S'</span>).timetuple()</span><br><span class="line">    ts = time.mktime(utc_timetuple)</span><br><span class="line">    <span class="keyword">return</span> int(ts) * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">date_str = <span class="string">'2015/10/27 00:00:00'</span></span><br><span class="line"><span class="keyword">print</span> local\_to\_utc(date_str)</span><br><span class="line"><span class="keyword">print</span> local\_timestamp(date\_str)</span><br></pre></td></tr></table></figure></p><p>最后打印的结果，可以看到两个函数输出的时间戳是不一样的。（P.S.笔者在东九区）</p><p>1445904000000<br>1445871600000</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在python中有很多方法将datetime的字符串转换为 utc timestamp 网上找了好多，看起来都纷繁复杂。本文就想简单的做好一件事，就是将datetime的字符串转换为utc timestamp。 理解这个转换的关键，在于理解python中所有的日期字符串都被
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="知识" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="datetime" scheme="http://leowll.com/tags/datetime/"/>
    
      <category term="python" scheme="http://leowll.com/tags/python/"/>
    
      <category term="timestamp" scheme="http://leowll.com/tags/timestamp/"/>
    
      <category term="utc timestamp" scheme="http://leowll.com/tags/utc-timestamp/"/>
    
  </entry>
  
  <entry>
    <title>3招做好SSRS的分页</title>
    <link href="http://leowll.com/2015/10/25/ssrs-paging-3moves/"/>
    <id>http://leowll.com/2015/10/25/ssrs-paging-3moves/</id>
    <published>2015-10-25T14:15:05.000Z</published>
    <updated>2018-06-06T05:49:00.140Z</updated>
    
    <content type="html"><![CDATA[<p>在使用SSRS，也就是SQL Server Report Service（SQL Server 报表）的过程中，如果你在寻找下面3个问题的答案，本文可能会帮到你。</p><ul><li>针对每个数据分组重新设定页码</li><li>让表头在每个页面都能显示</li><li>让数据在合理的位置分页</li></ul><h4 id="针对每个数据分组重新设定页码"><a href="#针对每个数据分组重新设定页码" class="headerlink" title="针对每个数据分组重新设定页码"></a><strong>针对每个数据分组重新设定页码</strong></h4><p>在Details上设置属性，Group里面的ResetPageNumber设置为True，即可让每一个新的分组数据重新设定页码。 <a href="https://www.flickr.com/photos/136148236@N02/21841911853/in/dateposted-public/" title="group" target="_blank" rel="noopener"><img src="https://farm6.staticflickr.com/5687/21841911853_79b183f3a4_n.jpg" alt="group"></a>  </p><h4 id="让表头在每个页面都能显示"><a href="#让表头在每个页面都能显示" class="headerlink" title="让表头在每个页面都能显示"></a>让表头在每个页面都能显示</h4><p>在详细模式里面找到表头的Static，然后设置KeepWithGroup属性为After，RepeatOnNewPage为True。 如果表头之前还有上一层分组的Static，上一层分组的上述两个属性要分别设为Before和True。 在同一个分组的Static的RepeatOnNewPage不能设置为不同的值，所以同样设定为了True， 但是不希望在后续页面继续显示的部分，其KeepWithGroup只要设定为Before，就不会随后续数据分页而再次出现了。<a href="https://www.flickr.com/photos/136148236@N02/22474037011/in/dateposted-public/" title="repeatonnewpage" target="_blank" rel="noopener"><img src="https://farm1.staticflickr.com/712/22474037011_fb874db3ff_n.jpg" alt="repeatonnewpage"></a></p><h4 id="让数据在合理的位置分页"><a href="#让数据在合理的位置分页" class="headerlink" title="让数据在合理的位置分页"></a><strong>让数据在合理的位置分页</strong></h4><p>在希望保持为一个整体的Group上设置KeepTogether为True，就会尽量让同一组的数据在同一页面显示。 <a href="https://www.flickr.com/photos/136148236@N02/22276255729/in/dateposted-public/" title="keeptogether" target="_blank" rel="noopener"><img src="https://farm6.staticflickr.com/5659/22276255729_da2fee249a_n.jpg" alt="keeptogether"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用SSRS，也就是SQL Server Report Service（SQL Server 报表）的过程中，如果你在寻找下面3个问题的答案，本文可能会帮到你。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对每个数据分组重新设定页码&lt;/li&gt;
&lt;li&gt;让表头在每个页面都能显示&lt;/li&gt;

      
    
    </summary>
    
      <category term="知识" scheme="http://leowll.com/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="ssrs" scheme="http://leowll.com/tags/ssrs/"/>
    
      <category term="分页" scheme="http://leowll.com/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>关于Java Thread的一些认识</title>
    <link href="http://leowll.com/2015/10/10/java-multi-thread/"/>
    <id>http://leowll.com/2015/10/10/java-multi-thread/</id>
    <published>2015-10-10T06:30:05.000Z</published>
    <updated>2018-06-06T13:59:00.636Z</updated>
    
    <content type="html"><![CDATA[<p>最近为了考取Java 7的Gold资格而补课，多线程这一块看了好长一段时间才算有点头绪。 下面几点算是心得吧。明白这些东西之后，join（）也差不多可以理解了。</p><ul><li>主线程和主线程生成的子线程是两个独立的东西。start（）之后都是各自奔向终点。</li><li>如果子线程跑得快，主线程无法对它进行interrupt（）操作。 因为人家已经结束了，你再发号施令已经晚了。</li><li>被interrupt（）的子线程不会就此终止，而是会恢复原来的执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample11_5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String\[\] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ThreadA a = <span class="keyword">new</span> ThreadA();</span><br><span class="line">a.start();</span><br><span class="line">System.out.println(<span class="string">"main : sleep start."</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">System.out.println(<span class="string">"main : sleep end."</span>);</span><br><span class="line">a.interrupt();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Thread A : sleep start"</span>);</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println(<span class="string">"Thread A : sleep end"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"Catch Thread A interrupted"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"Thread A finished."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果如下：</p><p>main : sleep start.<br>Thread A : sleep start<br>main : sleep end.<br>Catch Thread A interrupted<br>Thread A finished.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近为了考取Java 7的Gold资格而补课，多线程这一块看了好长一段时间才算有点头绪。 下面几点算是心得吧。明白这些东西之后，join（）也差不多可以理解了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主线程和主线程生成的子线程是两个独立的东西。start（）之后都是各自奔向终点。&lt;/l
      
    
    </summary>
    
      <category term="知识" scheme="http://leowll.com/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Java" scheme="http://leowll.com/tags/Java/"/>
    
      <category term="多线程" scheme="http://leowll.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>重新开始</title>
    <link href="http://leowll.com/2015/10/09/restart/"/>
    <id>http://leowll.com/2015/10/09/restart/</id>
    <published>2015-10-09T13:31:17.000Z</published>
    <updated>2018-06-06T05:49:00.140Z</updated>
    
    <content type="html"><![CDATA[<p>2015年上半期的自我评价和上司面谈结束了。 科长一如既往的说你稍微改一下这个写法就可以了，如果没有意见我们就谈到这把。 我说科长且慢，“中长期职业规划”您看了没，我写了一些。 然后引出了离职的话题，科长说那实在是很遗憾，我会跟部长汇报的，下周给你消息。   然后，我就这么提出了辞职。   职业生涯刚刚起步，当初心急火燎的进了公司，心想背靠一个大公司，自己应该会得心应手吧。 可这两年过去了，每一天想的都是我他妈为什么在这里浪费时间。 又想起nissan的广告词，说的太让人心潮澎湃。</p><blockquote><p>２種類の人間がいる。 やりたいことやっちゃう人とやらない人。 やりたいことやってきたこの人生。 おかげで痛い目にもあってきた。 散々恥もかいてきた。 誰かの言うことを素直に聞いてりゃ、 今よりずっと楽だったかもしれない。 でもね、これだけは言える。 やりたいことやっちゃう人生のほうが、間違いなく面白い。 俺はこれからもやっちゃうよ あんたはどうする？</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2015年上半期的自我评价和上司面谈结束了。 科长一如既往的说你稍微改一下这个写法就可以了，如果没有意见我们就谈到这把。 我说科长且慢，“中长期职业规划”您看了没，我写了一些。 然后引出了离职的话题，科长说那实在是很遗憾，我会跟部长汇报的，下周给你消息。   然后，我就这么
      
    
    </summary>
    
      <category term="人生" scheme="http://leowll.com/categories/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="职业" scheme="http://leowll.com/categories/%E4%BA%BA%E7%94%9F/%E8%81%8C%E4%B8%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows下SQL Server2008的定时备份策略</title>
    <link href="http://leowll.com/2012/03/19/sqlserver-2008-backup/"/>
    <id>http://leowll.com/2012/03/19/sqlserver-2008-backup/</id>
    <published>2012-03-19T07:06:55.000Z</published>
    <updated>2018-06-06T05:49:00.140Z</updated>
    
    <content type="html"><![CDATA[<p>在windows下对SQL Server2008数据库进行定时备份，需要做以下工作： 1.编写备份数据库的bat文件，内容形似： <em>backup database testdb to disk=’d:\backup\testdb.bak’  &gt;&gt; .\backup.log</em> 2.编写copy数据库备份文件并重命名的bat文件，形似： <em>SET DT=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%</em> <em>COPY D:\backup.bak  D:\backup%DT%.bak &gt;&gt; .\copy.log</em> 2.建立两个windows计划任务，分别选定时间和周期执行上述备份bat文件。 这样就可以实现sql server的定时备份策略了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在windows下对SQL Server2008数据库进行定时备份，需要做以下工作： 1.编写备份数据库的bat文件，内容形似： &lt;em&gt;backup database testdb to disk=’d:\backup\testdb.bak’  &amp;gt;&amp;gt; .\ba
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="未分類" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/%E6%9C%AA%E5%88%86%E9%A1%9E/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring+Struts2+Hibernate 整合Extjs时无法读取json数据的问题之解决办法</title>
    <link href="http://leowll.com/2012/02/12/ssh-extjs-json/"/>
    <id>http://leowll.com/2012/02/12/ssh-extjs-json/</id>
    <published>2012-02-13T01:19:28.000Z</published>
    <updated>2018-06-06T14:00:21.161Z</updated>
    
    <content type="html"><![CDATA[<p>在SSH和Extjs的整合过程中，需要Grid从服务器端读取json格式的数据显示在前端，在action的class中配置了service属性，并通过spring对该service进行注入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String userID;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> String delFlg;</span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure></p><p>  在struts2中，如果struts.xml中将action的返回结果定义成了json类型，strut2就自动将该action的属性全部json序列化，但是service却无法序列化， 于是需要在struts.xml中将相应的action的配置更改一下。如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"searchUser"</span> <span class="attr">method</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"searchUserAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"json"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeProperties"</span>&gt;</span></span><br><span class="line">userService</span><br><span class="line"><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>  exludeProperties即可将不需要json序列化的属性排除在外。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在SSH和Extjs的整合过程中，需要Grid从服务器端读取json格式的数据显示在前端，在action的class中配置了service属性，并通过spring对该service进行注入。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="知识" scheme="http://leowll.com/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Hibernate" scheme="http://leowll.com/tags/Hibernate/"/>
    
      <category term="Java" scheme="http://leowll.com/tags/Java/"/>
    
      <category term="Struts2" scheme="http://leowll.com/tags/Struts2/"/>
    
      <category term="Json" scheme="http://leowll.com/tags/Json/"/>
    
      <category term="Spring" scheme="http://leowll.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Cookie 无法保存的另一个可能原因</title>
    <link href="http://leowll.com/2011/12/28/cookie-cannot-save/"/>
    <id>http://leowll.com/2011/12/28/cookie-cannot-save/</id>
    <published>2011-12-28T10:10:20.000Z</published>
    <updated>2018-06-06T14:02:22.545Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中需要往cookie中写数据，之前遇到的问题是如果写入的内容超出了单个cookie的大小限制（4096字节，4KB），则服务器端的response就会异常。<br>今天的问题则是，虽然已经把很长的内容分割成立个好几段，并分别写入了不同的cookie中，但服务器端同样不能正常响应。 查资料得知，不知浏览器对同一个站点的cookie的个数，单个cookie文件的大小有限制，服务器还对每一次请求的httpheader的大小有限制。<br>对tomcat服务器来说，需要修改server.xml中的响应配置，在形如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">maxHttpHeaderSize</span>=<span class="string">"40960"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>的部分进行相应配置，上面的maxHttpHeaderSize就规定了本服务器可以处理的HttpHeader的大小上限为40KB。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在项目中需要往cookie中写数据，之前遇到的问题是如果写入的内容超出了单个cookie的大小限制（4096字节，4KB），则服务器端的response就会异常。&lt;br&gt;今天的问题则是，虽然已经把很长的内容分割成立个好几段，并分别写入了不同的cookie中，但服务器端同样不
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="未分類" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/%E6%9C%AA%E5%88%86%E9%A1%9E/"/>
    
    
      <category term="Cookie" scheme="http://leowll.com/tags/Cookie/"/>
    
      <category term="web开发" scheme="http://leowll.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Struts2无法写Cookie的原因分析</title>
    <link href="http://leowll.com/2011/12/19/strust2-cannot-save-cookie/"/>
    <id>http://leowll.com/2011/12/19/strust2-cannot-save-cookie/</id>
    <published>2011-12-20T01:47:16.000Z</published>
    <updated>2018-06-06T14:04:40.814Z</updated>
    
    <content type="html"><![CDATA[<p>在struts2项目中，希望把用户的表单输入保存在本地，而不是保存在数据库上，于是想到了cookie。 在action中可以这样写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">"myCookie"</span>,<span class="string">"cookieContent"</span>); </span><br><span class="line">cookie.setMaxAge(<span class="number">3600</span>*<span class="number">24</span>);<span class="comment">//过期时间为一天 </span></span><br><span class="line">ServletActionContext.getResponse.addCookie(cookie);</span><br></pre></td></tr></table></figure></p><p>但是始终不能保存到客户端的硬盘上，刚开始的时候以为cookie的读写操作只能写在jsp页面中，或者只能通过javascript来操作， 后来发现不是这么回事。 关键的原因在于<a href="http://support.microsoft.com/kb/306070/zh-cn" title="在 Internet Explorer 中的 cookie 的数字和大小限制" target="_blank" rel="noopener">cookie是有大小限制的</a>，如果想写入的内容超过了4KB，写操作便不能完成。</p><blockquote><p>Microsoft Internet Explorer 符合以下的 RFC 2109 推荐最小限制：</p><ul><li>至少 300 的 cookie</li><li>至少每 cookie （如构成 cookie 非终端设置 Cookie 标头的语法描述中的字符的大小为单位） 的 4096 字节</li><li>至少 20 cookie，每个唯一的主机或域名</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在struts2项目中，希望把用户的表单输入保存在本地，而不是保存在数据库上，于是想到了cookie。 在action中可以这样写：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Extjs 在IE8中 GridPanel日期显示异常的处理</title>
    <link href="http://leowll.com/2011/12/02/extjs-ie8-gridpanel-dateformat/"/>
    <id>http://leowll.com/2011/12/02/extjs-ie8-gridpanel-dateformat/</id>
    <published>2011-12-03T02:00:17.000Z</published>
    <updated>2018-06-06T14:28:43.736Z</updated>
    
    <content type="html"><![CDATA[<p>Extjs3.4的GridPanel在IE8中会出现日期无法render的现象，要解决这个问题，需要在 store的reader的column相应的字段上加上如下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">convert:<span class="function"><span class="keyword">function</span>(<span class="params">v,record</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>.parseDate(v,<span class="string">'Y-m-dTH:i:s'</span>);</span><br><span class="line"> <span class="keyword">return</span> date.format(<span class="string">'Y年m月d日'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要的问题就在parseDate的格式上，只要确保parseDate用到的日期格式和从服务器端传回来的数据格式是一致的，Extjs就可以进行解析了。 若想要查看服务器端传回来的数据格式，使用chrome或者firefox的firebug插件就可以了。 ps：Extjs在IE8上总有这样那样的问题，IE9和chrome就相对聪明多了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Extjs3.4的GridPanel在IE8中会出现日期无法render的现象，要解决这个问题，需要在 store的reader的column相应的字段上加上如下代码&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="技术" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="未分類" scheme="http://leowll.com/categories/%E6%8A%80%E6%9C%AF/%E6%9C%AA%E5%88%86%E9%A1%9E/"/>
    
    
      <category term="extjs" scheme="http://leowll.com/tags/extjs/"/>
    
      <category term="gridpanel" scheme="http://leowll.com/tags/gridpanel/"/>
    
  </entry>
  
</feed>
